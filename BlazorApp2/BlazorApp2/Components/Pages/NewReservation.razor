@page "/new-reservation"
@using BlazorApp2.Services
@using CarRental.Application.DTOs
@inject HttpClient HttpClient
@inject IHttpClientFactory ClientFactory
@inject UserState UserState
@inject NavigationManager NavigationManager

<h3>New Reservation</h3>

<EditForm Model="@reservation" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="paymentMethod">Payment Method:</label>
        <InputSelect id="paymentMethod" @bind-Value="reservation.PaymentMethodId" class="form-control">
            <option value="">-- Select Payment Method --</option>
            @foreach (var method in paymentMethods)
            {
                <option value="@method.Id">@method.Id</option>
            }
        </InputSelect>
    </div>

    <div class="form-group mt-4">
        <h4>Available Cars</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>Select</th>
                    <th>Brand</th>
                    <th>Model</th>
                    <th>License Plate</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var car in availableCars)
                {
                    <tr>
                        <td>
                           <input type="radio" name="selectedCar" value="@car.Id" 
                                   checked="@(car.Id == reservation.CarId)"
                                   @onchange="@(() => OnCarSelected(car))" />
                        </td>
                        <td>@car.Brand</td>
                        <td>@car.Model</td>
                        <td>@car.LicensePlate</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <input type="datetime-local" @bind="startDate" min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")"/>
    <input type="datetime-local" @bind="endDate" min="@startDate.ToString("yyyy-MM-ddTHH:mm")"/>
    <button type="submit" class="btn btn-primary mt-3" @onclick="CreateReservation" disabled="@inValidDates">Create Reservation</button>
</EditForm>

@code {
    private ReservationModel reservation = new ReservationModel();
    private bool inValidDates = true;
    private DateTime _startDate = DateTime.Today;

    private DateTime startDate
    {
        get => _startDate;
        set
        {
            _startDate = value;
            OnDateChanged();
        }
    }

    private DateTime _endDate = DateTime.Today;

    private DateTime endDate
    {
        get => _endDate;
        set
        {
            _endDate = value;
            OnDateChanged();
        }
    }

    private void OnDateChanged()
    {
        inValidDates = _startDate > _endDate.AddDays(-1);
    }

    private List<ReservationDTO> reservations = new List<ReservationDTO>();
    private List<PaymentMethodDTO> paymentMethods = new List<PaymentMethodDTO>();
    private List<CarDTO> availableCars = new List<CarDTO>();    
    private List<CarDTO> allCars = new List<CarDTO>();
    private CarDTO selectedCar = null;  

    protected override async Task OnInitializedAsync()
    {
        // TODO: Replace with actual customer ID
        int customerId = 1;
        paymentMethods = (await HttpClient.GetFromJsonAsync<IEnumerable<PaymentMethodDTO>>($"http://localhost:5001/api/PaymentMethod/Customer/{customerId}")).ToList(); 
        await ReloadCars();
    }

    private void OnCarSelected(CarDTO car)
    {
        selectedCar = car;
        StateHasChanged();
    }

    private async Task LoadCars()
    {
        availableCars = allCars.Where(car => !reservations.Any(r => r.CarId == car.Id && r.ReservationEndDateTime >= DateTime.Today && r.ReservationStartDateTime <= DateTime.Today)).ToList();
    }

    private async Task ReloadCars()
    {
        reservations = (await HttpClient.GetFromJsonAsync<IEnumerable<ReservationDTO>>("http://localhost:5001/api/Reservation")).ToList();
        allCars = (await HttpClient.GetFromJsonAsync<IEnumerable<CarDTO>>("http://localhost:5001/api/Car")).ToList();
        await LoadCars();  
    }

    private async Task HandleValidSubmit()
    {
        // TODO: Implement reservation creation logic
        Console.WriteLine($"Creating reservation for Car ID: {reservation.CarId} with Payment Method ID: {reservation.PaymentMethodId}");
    }

    private async Task CreateReservation()
    {
        try
        {
            var newReservation = new ReservationDTO(
                Id: Guid.NewGuid(),
                CarId: selectedCar.Id, // You might want to add a car selection feature
                CustomerId: UserState.CustomerId, // You might want to get this from UserState or elsewhere
                ReservationStartDateTime: startDate,
                ReservationEndDateTime: endDate,
                Note: "Created from UI" + UserState.CustomerId
            );

            var client = ClientFactory.CreateClient();
            var response = await client.PostAsJsonAsync("http://localhost:5001/api/Reservation", newReservation);
            if (!response.IsSuccessStatusCode)
            {
                // Handle error
                Console.WriteLine("Failed to create reservation");
            }

            NavigationManager.NavigateTo($"/Reservations");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating reservation: {ex.Message}");
        }
    }

    private class ReservationModel
    {
        public int CarId { get; set; }
        public int PaymentMethodId { get; set; }
    }
}