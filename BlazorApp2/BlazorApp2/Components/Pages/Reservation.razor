@page "/reservations"
@using CarRental.Application.DTOs
@using System.Net.Http.Json
@using BlazorApp2.Services
@inject IHttpClientFactory ClientFactory
@inject UserState UserState

<h3>Reservations for @UserState.Username</h3>

<div class="d-flex justify-content-between mb-3">
    <button class="btn btn-danger" @onclick="CancelReservation" disabled="@(selectedReservation == null)">Cancel Reservation</button>
    <div>
        <input type="datetime-local" @bind="startDate" @onchange="OnStartDateChanged" min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
        <input type="datetime-local" @bind="endDate" @onchange="OnEndDateChanged" min="@startDate.ToString("yyyy-MM-ddTHH:mm")" />
        <button class="btn btn-primary" @onclick="CreateReservation">Create Reservation</button>
    </div>
</div>

@if (reservations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Select</th>
                <th>ID</th>
                @* <th>Car</th> *@
                <th>Start Date</th>
                <th>End Date</th>
                @* <th>Status</th> *@
            </tr>
        </thead>
        <tbody>
            @foreach (var reservation in reservations)
            {
                <tr class="@(selectedReservation == reservation ? "table-primary" : "")" @onclick="() => SelectReservation(reservation)">
                    <td>
                        <input type="radio" name="selectedReservation" 
                               value="@reservation.Id" 
                               checked="@(selectedReservation?.Id == reservation.Id)"
                               @onchange="@(() => SelectReservation(reservation))" />
                    </td>
                    <td>@reservation.Id</td>
                    @* <td>@reservation.Car.Brand @reservation.Car.Model</td> *@
                    <td>@reservation.ReservationStartDateTime.ToString("g")</td>
                    <td>@reservation.ReservationEndDateTime.ToString("g")</td>
                    
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<ReservationDTO> reservations;
    private ReservationDTO selectedReservation;
    private DateTime startDate = DateTime.Now;
    private DateTime endDate = DateTime.Now.AddDays(1);

    protected override async Task OnInitializedAsync()
    {
        await LoadReservations();
    }

    private async Task LoadReservations()
    {
        try
        {
            var client = ClientFactory.CreateClient();
            reservations = await client.GetFromJsonAsync<IEnumerable<ReservationDTO>>("http://localhost:5001/api/reservation");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading reservations: {ex.Message}");
            // You might want to show an error message to the user here
        }
    }

    private void SelectReservation(ReservationDTO reservation)
    {
        selectedReservation = selectedReservation == reservation ? null : reservation;
    }

    private void OnStartDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime newStartDate))
        {
            startDate = newStartDate;
            if (endDate <= startDate)
            {
                endDate = startDate.AddDays(1);
            }
        }
    }

    private void OnEndDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime newEndDate))
        {
            endDate = newEndDate;
            if (endDate <= startDate)
            {
                DateTime newStartDate = endDate.AddDays(-1);
                if (newStartDate < DateTime.Now)
                {
                    newStartDate = DateTime.Now;
                }
                startDate = newStartDate;
            }
        }
    }


    private async Task CancelReservation()
    {
        if (selectedReservation != null)
        {
            try
            {
                var client = ClientFactory.CreateClient();
                var response = await client.DeleteAsync($"http://localhost:5001/api/reservation/{selectedReservation.Id}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadReservations();
                    selectedReservation = null;
                }
                else
                {
                    // Handle error
                    Console.WriteLine("Failed to cancel reservation");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error cancelling reservation: {ex.Message}");
            }
        }
    }

    private async Task CreateReservation()
    {
        try
        {
            var newReservation = new ReservationDTO(
                Id: Guid.NewGuid(),
                CarId: 1, // You might want to add a car selection feature
                CustomerId: 1, // You might want to get this from UserState or elsewhere
                ReservationStartDateTime: startDate,
                ReservationEndDateTime: endDate,
                Note: "Created from UI"
            );

            var client = ClientFactory.CreateClient();
            var response = await client.PostAsJsonAsync("http://localhost:5001/api/Reservation", newReservation);
            if (response.IsSuccessStatusCode)
            {
                await LoadReservations();
            }
            else
            {
                // Handle error
                Console.WriteLine("Failed to create reservation");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating reservation: {ex.Message}");
        }
    }
}

<style>
    .table-hover tbody tr:hover {
        cursor: pointer;
    }
</style>